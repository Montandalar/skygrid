package.path = "../?.lua" .. package.path

maths = require("maths")

describe("mod_align_nearest", function()
	it("handles rounding +inf negatives correctly for odd modulus", function()
		assert.equals(-25, maths.mod_align_nearest(-23, 5))
	end)
	it("handles rounding -inf negatives correctly for odd modulus", function()
		assert.equals(-20, maths.mod_align_nearest(-22, 5))
	end)
	it("handles rounding -inf positives correctly for odd modulus", function()
		assert.equals(20, maths.mod_align_nearest(22, 5))
	end)
	it("handles rounding +inf positives correctly for odd modulus", function()
		assert.equals(25, maths.mod_align_nearest(23, 5))
	end)

	it("handles rounding -inf positives correctly for even modulus", function()
		assert.equals(0, maths.mod_align_nearest(3, 8))
	end)
	it("handles rounding +inf positives correctly for even modulus", function()
		assert.equals(8, maths.mod_align_nearest(4, 8))
	end)
	it("handles rounding +inf positives correctly for even modulus", function()
		assert.equals(8, maths.mod_align_nearest(5,8))
	end)
	it("handles rounding +inf negatives correctly for even modulus", function()
		assert.equals(0, maths.mod_align_nearest(-3, 8))
	end)
	it("handles rounding -inf negatives correctly for even modulus", function()
		assert.equals(-8, maths.mod_align_nearest(-4, 8))
	end)
	it("handles rounding -inf positives correctly for even modulus", function()
		assert.equals(-8, maths.mod_align_nearest(-5,8))
	end)

	it("handles 0 as input correctly", function()
		assert.equals(0, maths.mod_align_nearest(0,1))
	end)

	it("handles 0 modulus as passthrough", function()
		assert.equals(0, maths.mod_align_nearest(0,0))
	end)

end)

describe("mod_align_neginf", function()
	it("handles rounding 0 correctly for odd modulus", function()
		assert.equals(0, maths.mod_align_neginf(0, 5))
	end)
	it("handles rounding -inf negatives correctly for odd modulus", function()
		assert.equals(-25, maths.mod_align_neginf(-23, 5))
		assert.equals(-25, maths.mod_align_neginf(-22, 5))
	end)
	it("handles rounding -inf positives correctly for odd modulus", function()
		assert.equals(20, maths.mod_align_neginf(22, 5))
		assert.equals(20, maths.mod_align_neginf(23, 5))
	end)

	it("handles rounding -inf positives correctly for even modulus", function()
		assert.equals(0, maths.mod_align_neginf(3, 8))
		assert.equals(0, maths.mod_align_neginf(4, 8))
		assert.equals(0, maths.mod_align_neginf(5,8))
	end)
	it("handles rounding -inf negatives correctly for even modulus", function()
		assert.equals(-8, maths.mod_align_neginf(-3, 8))
		assert.equals(-8, maths.mod_align_neginf(-4, 8))
		assert.equals(-8, maths.mod_align_neginf(-5,8))
	end)

	it("handles 0 as input correctly", function()
		assert.equals(0, maths.mod_align_neginf(0,1))
	end)

	it("handles 0 modulus as passthrough", function()
		assert.equals(0, maths.mod_align_neginf(0,0))
	end)

end)

describe("mod_align_posinf", function()
	it("handles rounding 0 correctly for odd modulus", function()
		assert.equals(0, maths.mod_align_posinf(0, 5))
	end)

	it("handles rounding +inf negatives correctly for odd modulus", function()
		assert.equals(-20, maths.mod_align_posinf(-23, 5))
		assert.equals(-20, maths.mod_align_posinf(-22, 5))
	end)
	it("handles rounding +inf positives correctly for odd modulus", function()
		assert.equals(25, maths.mod_align_posinf(22, 5))
		assert.equals(25, maths.mod_align_posinf(23, 5))
	end)

	it("handles rounding 0 correctly for even modulus", function()
		assert.equals(0, maths.mod_align_posinf(0, 8))
	end)

	it("handles rounding +inf positives correctly for even modulus", function()
		assert.equals(8, maths.mod_align_posinf(3, 8))
		assert.equals(8, maths.mod_align_posinf(4, 8))
		assert.equals(8, maths.mod_align_posinf(5,8))
	end)
	it("handles rounding +inf negatives correctly for even modulus", function()
		assert.equals(0, maths.mod_align_posinf(-3, 8))
		assert.equals(0, maths.mod_align_posinf(-4, 8))
		assert.equals(0, maths.mod_align_posinf(-5,8))
	end)

	it("handles 0 as input correctly", function()
		assert.equals(0, maths.mod_align_posinf(0,1))
	end)

	it("handles 0 modulus as passthrough", function()
		assert.equals(0, maths.mod_align_posinf(0,0))
	end)

end)
